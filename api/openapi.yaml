openapi: 3.0.0
info:
  description: |
    This API provides operations for monitoring Data Planes connected to MDCB and accessing diagnostic data.  It includes endpoints for retrieving connected data plane details, performing health checks,  and accessing Go's built-in pprof diagnostics for advanced performance profiling.
  title: MDCB Data Planes and Diagnostics API
  version: 1.0.0
servers:
- url: /
paths:
  /dataplanes:
    get:
      description: "Provides a list of all the data plane nodes connected to MDCB.\
        \ Data plane nodes are Tyk Gateways that make your APIs available to your\
        \ consumers. MDCB offers centralised management of your data plane nodes.\
        \ This endpoint offers metadata and status for all connected data plane nodes,\
        \ allowing for monitoring and troubleshooting."
      parameters:
      - description: Secret value set in sink.conf
        explode: false
        in: header
        name: x-tyk-authorization
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    $ref: '#/components/schemas/Node'
                  type: array
                type: object
          description: Successful retrieval of the connected data planes.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access due to invalid or missing administrative key.
      summary: Retrieve information of all the connected data plane nodes.
  /health:
    get:
      description: Returns OK if the service is up and running.
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: OK
                type: string
          description: Service is up and running.
      summary: Health Check
  /debug/pprof/profile:
    get:
      description: Returns CPU profiling data. Available only when HTTPProfile is
        enabled in sink.conf.
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: CPU profiling data.
      summary: CPU Profiling data
  /debug/pprof/{profileType}:
    get:
      description: |
        Serves various pprof data like heap, goroutine, threadcreate, block, and so on. The `{profileType}` path parameter can accept various profiling types as well as more complex patterns. Available only when HTTPProfile is enabled in sink.conf.
      parameters:
      - description: "The specific pprof data to retrieve (heap, goroutine, threadcreate,\
          \ block, etc.), or a pattern matching multiple types."
        explode: false
        in: path
        name: profileType
        required: true
        schema:
          example: heap
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: pprof data.
      summary: pprof data
components:
  schemas:
    Node:
      properties:
        node_id:
          example: solo-uid
          type: string
        api_key:
          example: c5e9b9ed8dee42fb668f81cef7f905bb
          type: string
        group_id:
          example: Redis Cluster Slave 1
          type: string
        node_version:
          example: v5.3.0-dev
          type: string
        ttl:
          example: 10
          type: integer
        tags:
          example:
          - tag1
          - tag2
          items:
            type: string
          type: array
        health:
          $ref: '#/components/schemas/Health'
        stats:
          $ref: '#/components/schemas/Stats'
      type: object
    Health:
      properties:
        redis:
          $ref: '#/components/schemas/ComponentStatus'
        rpc:
          $ref: '#/components/schemas/ComponentStatus'
      type: object
    ComponentStatus:
      properties:
        status:
          example: pass
          type: string
        componentType:
          example: datastore
          type: string
        time:
          example: 2024-02-23T08:51:23-03:00
          format: date-time
          type: string
      type: object
    Stats:
      properties:
        apis_count:
          example: 1
          type: integer
        policies_count:
          example: 0
          type: integer
      type: object
    Error:
      example:
        error: Attempted administrative access with invalid or missing key!
      properties:
        error:
          example: Attempted administrative access with invalid or missing key!
          type: string
      type: object
