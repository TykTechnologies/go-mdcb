/*
MDCB Data Planes and Diagnostics API

This API provides operations for monitoring Data Planes connected to MDCB and accessing diagnostic data.  It includes endpoints for retrieving connected data plane details, performing health checks,  and accessing Go's built-in pprof diagnostics for advanced performance profiling. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mdcb

import (
	"encoding/json"
)

// checks if the Health type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Health{}

// Health struct for Health
type Health struct {
	Redis *ComponentStatus `json:"redis,omitempty"`
	Rpc *ComponentStatus `json:"rpc,omitempty"`
}

// NewHealth instantiates a new Health object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealth() *Health {
	this := Health{}
	return &this
}

// NewHealthWithDefaults instantiates a new Health object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthWithDefaults() *Health {
	this := Health{}
	return &this
}

// GetRedis returns the Redis field value if set, zero value otherwise.
func (o *Health) GetRedis() ComponentStatus {
	if o == nil || IsNil(o.Redis) {
		var ret ComponentStatus
		return ret
	}
	return *o.Redis
}

// GetRedisOk returns a tuple with the Redis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetRedisOk() (*ComponentStatus, bool) {
	if o == nil || IsNil(o.Redis) {
		return nil, false
	}
	return o.Redis, true
}

// HasRedis returns a boolean if a field has been set.
func (o *Health) HasRedis() bool {
	if o != nil && !IsNil(o.Redis) {
		return true
	}

	return false
}

// SetRedis gets a reference to the given ComponentStatus and assigns it to the Redis field.
func (o *Health) SetRedis(v ComponentStatus) {
	o.Redis = &v
}

// GetRpc returns the Rpc field value if set, zero value otherwise.
func (o *Health) GetRpc() ComponentStatus {
	if o == nil || IsNil(o.Rpc) {
		var ret ComponentStatus
		return ret
	}
	return *o.Rpc
}

// GetRpcOk returns a tuple with the Rpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetRpcOk() (*ComponentStatus, bool) {
	if o == nil || IsNil(o.Rpc) {
		return nil, false
	}
	return o.Rpc, true
}

// HasRpc returns a boolean if a field has been set.
func (o *Health) HasRpc() bool {
	if o != nil && !IsNil(o.Rpc) {
		return true
	}

	return false
}

// SetRpc gets a reference to the given ComponentStatus and assigns it to the Rpc field.
func (o *Health) SetRpc(v ComponentStatus) {
	o.Rpc = &v
}

func (o Health) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Health) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Redis) {
		toSerialize["redis"] = o.Redis
	}
	if !IsNil(o.Rpc) {
		toSerialize["rpc"] = o.Rpc
	}
	return toSerialize, nil
}

type NullableHealth struct {
	value *Health
	isSet bool
}

func (v NullableHealth) Get() *Health {
	return v.value
}

func (v *NullableHealth) Set(val *Health) {
	v.value = val
	v.isSet = true
}

func (v NullableHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealth(val *Health) *NullableHealth {
	return &NullableHealth{value: val, isSet: true}
}

func (v NullableHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


