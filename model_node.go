/*
MDCB Data Planes and Diagnostics API

This API provides operations for monitoring Data Planes connected to MDCB and accessing diagnostic data.  It includes endpoints for retrieving connected data plane details, performing health checks,  and accessing Go's built-in pprof diagnostics for advanced performance profiling. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mdcb

import (
	"encoding/json"
)

// checks if the Node type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Node{}

// Node struct for Node
type Node struct {
	NodeId *string `json:"node_id,omitempty"`
	ApiKey *string `json:"api_key,omitempty"`
	GroupId *string `json:"group_id,omitempty"`
	NodeVersion *string `json:"node_version,omitempty"`
	Ttl *int32 `json:"ttl,omitempty"`
	Tags []string `json:"tags,omitempty"`
	Health *Health `json:"health,omitempty"`
	Stats *Stats `json:"stats,omitempty"`
}

// NewNode instantiates a new Node object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNode() *Node {
	this := Node{}
	return &this
}

// NewNodeWithDefaults instantiates a new Node object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeWithDefaults() *Node {
	this := Node{}
	return &this
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *Node) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *Node) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *Node) SetNodeId(v string) {
	o.NodeId = &v
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *Node) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *Node) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *Node) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *Node) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *Node) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *Node) SetGroupId(v string) {
	o.GroupId = &v
}

// GetNodeVersion returns the NodeVersion field value if set, zero value otherwise.
func (o *Node) GetNodeVersion() string {
	if o == nil || IsNil(o.NodeVersion) {
		var ret string
		return ret
	}
	return *o.NodeVersion
}

// GetNodeVersionOk returns a tuple with the NodeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetNodeVersionOk() (*string, bool) {
	if o == nil || IsNil(o.NodeVersion) {
		return nil, false
	}
	return o.NodeVersion, true
}

// HasNodeVersion returns a boolean if a field has been set.
func (o *Node) HasNodeVersion() bool {
	if o != nil && !IsNil(o.NodeVersion) {
		return true
	}

	return false
}

// SetNodeVersion gets a reference to the given string and assigns it to the NodeVersion field.
func (o *Node) SetNodeVersion(v string) {
	o.NodeVersion = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *Node) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl) {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *Node) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *Node) SetTtl(v int32) {
	o.Ttl = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Node) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Node) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Node) SetTags(v []string) {
	o.Tags = v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *Node) GetHealth() Health {
	if o == nil || IsNil(o.Health) {
		var ret Health
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetHealthOk() (*Health, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *Node) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given Health and assigns it to the Health field.
func (o *Node) SetHealth(v Health) {
	o.Health = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *Node) GetStats() Stats {
	if o == nil || IsNil(o.Stats) {
		var ret Stats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetStatsOk() (*Stats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *Node) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given Stats and assigns it to the Stats field.
func (o *Node) SetStats(v Stats) {
	o.Stats = &v
}

func (o Node) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Node) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NodeId) {
		toSerialize["node_id"] = o.NodeId
	}
	if !IsNil(o.ApiKey) {
		toSerialize["api_key"] = o.ApiKey
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.NodeVersion) {
		toSerialize["node_version"] = o.NodeVersion
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Health) {
		toSerialize["health"] = o.Health
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	return toSerialize, nil
}

type NullableNode struct {
	value *Node
	isSet bool
}

func (v NullableNode) Get() *Node {
	return v.value
}

func (v *NullableNode) Set(val *Node) {
	v.value = val
	v.isSet = true
}

func (v NullableNode) IsSet() bool {
	return v.isSet
}

func (v *NullableNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNode(val *Node) *NullableNode {
	return &NullableNode{value: val, isSet: true}
}

func (v NullableNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


