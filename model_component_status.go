/*
MDCB Data Planes and Diagnostics API

This API provides operations for monitoring Data Planes connected to MDCB and accessing diagnostic data.  It includes endpoints for retrieving connected data plane details, performing health checks,  and accessing Go's built-in pprof diagnostics for advanced performance profiling. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mdcb

import (
	"encoding/json"
	"time"
)

// checks if the ComponentStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentStatus{}

// ComponentStatus struct for ComponentStatus
type ComponentStatus struct {
	Status *string `json:"status,omitempty"`
	ComponentType *string `json:"componentType,omitempty"`
	Time *time.Time `json:"time,omitempty"`
}

// NewComponentStatus instantiates a new ComponentStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentStatus() *ComponentStatus {
	this := ComponentStatus{}
	return &this
}

// NewComponentStatusWithDefaults instantiates a new ComponentStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentStatusWithDefaults() *ComponentStatus {
	this := ComponentStatus{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ComponentStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ComponentStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ComponentStatus) SetStatus(v string) {
	o.Status = &v
}

// GetComponentType returns the ComponentType field value if set, zero value otherwise.
func (o *ComponentStatus) GetComponentType() string {
	if o == nil || IsNil(o.ComponentType) {
		var ret string
		return ret
	}
	return *o.ComponentType
}

// GetComponentTypeOk returns a tuple with the ComponentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentStatus) GetComponentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentType) {
		return nil, false
	}
	return o.ComponentType, true
}

// HasComponentType returns a boolean if a field has been set.
func (o *ComponentStatus) HasComponentType() bool {
	if o != nil && !IsNil(o.ComponentType) {
		return true
	}

	return false
}

// SetComponentType gets a reference to the given string and assigns it to the ComponentType field.
func (o *ComponentStatus) SetComponentType(v string) {
	o.ComponentType = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ComponentStatus) GetTime() time.Time {
	if o == nil || IsNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentStatus) GetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ComponentStatus) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *ComponentStatus) SetTime(v time.Time) {
	o.Time = &v
}

func (o ComponentStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ComponentType) {
		toSerialize["componentType"] = o.ComponentType
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullableComponentStatus struct {
	value *ComponentStatus
	isSet bool
}

func (v NullableComponentStatus) Get() *ComponentStatus {
	return v.value
}

func (v *NullableComponentStatus) Set(val *ComponentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentStatus(val *ComponentStatus) *NullableComponentStatus {
	return &NullableComponentStatus{value: val, isSet: true}
}

func (v NullableComponentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


