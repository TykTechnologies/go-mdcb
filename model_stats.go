/*
MDCB Data Planes and Diagnostics API

This API provides operations for monitoring Data Planes connected to MDCB and accessing diagnostic data.  It includes endpoints for retrieving connected data plane details, performing health checks,  and accessing Go's built-in pprof diagnostics for advanced performance profiling. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mdcb

import (
	"encoding/json"
)

// checks if the Stats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stats{}

// Stats struct for Stats
type Stats struct {
	ApisCount *int32 `json:"apis_count,omitempty"`
	PoliciesCount *int32 `json:"policies_count,omitempty"`
}

// NewStats instantiates a new Stats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStats() *Stats {
	this := Stats{}
	return &this
}

// NewStatsWithDefaults instantiates a new Stats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatsWithDefaults() *Stats {
	this := Stats{}
	return &this
}

// GetApisCount returns the ApisCount field value if set, zero value otherwise.
func (o *Stats) GetApisCount() int32 {
	if o == nil || IsNil(o.ApisCount) {
		var ret int32
		return ret
	}
	return *o.ApisCount
}

// GetApisCountOk returns a tuple with the ApisCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stats) GetApisCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ApisCount) {
		return nil, false
	}
	return o.ApisCount, true
}

// HasApisCount returns a boolean if a field has been set.
func (o *Stats) HasApisCount() bool {
	if o != nil && !IsNil(o.ApisCount) {
		return true
	}

	return false
}

// SetApisCount gets a reference to the given int32 and assigns it to the ApisCount field.
func (o *Stats) SetApisCount(v int32) {
	o.ApisCount = &v
}

// GetPoliciesCount returns the PoliciesCount field value if set, zero value otherwise.
func (o *Stats) GetPoliciesCount() int32 {
	if o == nil || IsNil(o.PoliciesCount) {
		var ret int32
		return ret
	}
	return *o.PoliciesCount
}

// GetPoliciesCountOk returns a tuple with the PoliciesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stats) GetPoliciesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PoliciesCount) {
		return nil, false
	}
	return o.PoliciesCount, true
}

// HasPoliciesCount returns a boolean if a field has been set.
func (o *Stats) HasPoliciesCount() bool {
	if o != nil && !IsNil(o.PoliciesCount) {
		return true
	}

	return false
}

// SetPoliciesCount gets a reference to the given int32 and assigns it to the PoliciesCount field.
func (o *Stats) SetPoliciesCount(v int32) {
	o.PoliciesCount = &v
}

func (o Stats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApisCount) {
		toSerialize["apis_count"] = o.ApisCount
	}
	if !IsNil(o.PoliciesCount) {
		toSerialize["policies_count"] = o.PoliciesCount
	}
	return toSerialize, nil
}

type NullableStats struct {
	value *Stats
	isSet bool
}

func (v NullableStats) Get() *Stats {
	return v.value
}

func (v *NullableStats) Set(val *Stats) {
	v.value = val
	v.isSet = true
}

func (v NullableStats) IsSet() bool {
	return v.isSet
}

func (v *NullableStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStats(val *Stats) *NullableStats {
	return &NullableStats{value: val, isSet: true}
}

func (v NullableStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


